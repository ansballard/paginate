{"version":3,"sources":["paginate.js"],"names":["that","paginate","countPerPage","contentAsFunction","numberisInteger","value","isFinite","Math","floor","page","count","i","getContent","setCount","newCount","this","getVisibleContent","setPage","newPage","getNumPages","getCount","getPage","visibleList","content","startIndex","slice","getPages","pageList","numPages","push","index","first","last","length","ceil","getIsFirstPage","getIsLastPage","firstPage","prevPage","nextPage","lastPage","define","amd","module","exports"],"mappings":";;;;;;CAOC,SAASA,GACT,YAQA,IAAIC,GAAW,SAAkBC,EAAcC,GAC9C,GAAIC,GAAkB,SAAyBC,GAC9C,MAAwB,gBAAVA,IACbC,SAASD,IACTE,KAAKC,MAAMH,KAAWA,GAGpBI,EAAO,EACPC,EAAQ,EACRC,EAAI,CACR,MAAIP,EAAgBF,IAAiBA,EAAe,GAGnD,KAAM,oDAFNQ,GAAQR,CAIT,IAAIU,GAAaT,CAEjB,QAWCU,SAAU,SAA0BC,GACnC,KAAIV,EAAgBU,IAAaA,EAAW,GAG3C,KAAM,oDAEP,OAJCJ,GAAQI,EAIFC,KAAKC,qBAObC,QAAS,SAAyBC,GACjC,KAAId,EAAgBc,IAAYA,GAAW,GAAKA,EAAUH,KAAKI,eAG9D,KAAM,8CAEP,OAJCV,GAAOS,EAIDH,KAAKC,qBAWbI,SAAU,WACT,MAAOV,IAWRW,QAAS,WACR,MAAOZ,IAORO,kBAAmB,WAClB,GAAIM,MACAC,EAAUX,GACXH,IAAQM,KAAKI,gBACfV,EAAO,EAER,IAAIe,GAAaf,EAAOC,CAKxB,OADAY,GAAcC,EAAQE,MAAMD,EAAYA,EAAad,IAQtDgB,SAAU,WACT,GAAIC,MACAJ,EAAUX,IACVgB,EAAWb,KAAKI,aACpB,KAAIR,EAAI,EAAOiB,EAAJjB,EAAcA,IACxBgB,EAASE,MAAMnB,MAASA,EAAOoB,MAASnB,EAAGoB,MAAe,IAANpB,EAASqB,KAAQrB,IAAMiB,EAAW,GAKvF,OAHGD,GAASM,OAAS,IACpBN,EAASA,EAASM,OAAS,GAAGvB,MAAQa,EAAQU,OAASvB,GAEjDiB,GAWRR,YAAa,WACZ,MAAOZ,MAAK2B,KAAKtB,IAAaqB,OAASvB,IAWxCyB,eAAgB,WACf,MAAgB,KAAT1B,GAYR2B,cAAe,WACd,MAAO3B,KAASM,KAAKI,cAAgB,GAWtCkB,UAAW,WAEV,MADA5B,GAAO,EACAM,KAAKC,qBAYbsB,SAAU,WAET,MADA7B,GAAQM,KAAKoB,iBAA8B1B,EAAXA,EAAO,EAChCM,KAAKC,qBAWbuB,SAAU,WAET,MADA9B,GAAQM,KAAKqB,gBAA6B3B,EAAXA,EAAO,EAC/BM,KAAKC,qBAWbwB,SAAU,WAET,MADA/B,GAAOM,KAAKI,cAAgB,EACrBJ,KAAKC,sBAMM,mBAAXyB,SAAyBA,OAAOC,IACzCD,OAAO,WACN,MAAOxC,KAEmB,mBAAX0C,SAA0BA,OAAOC,QACjDD,OAAOC,QAAU3C,EAEjBD,EAAKC,SAAWA,GAGhBc","file":"paginate.min.js","sourcesContent":["/** @preserve\r\n *  @ansballard/paginate\r\n *  This is a simple, dependency-free pagination module, which handles the logic\r\n *  for paginating arbitrary data given as functions\r\n *  MIT License\r\n */\r\n\r\n(function(that) {\r\n\t\"use strict\";\r\n\t/**\r\n\t *  An object to handle all the logic for a basic paginated list/table\r\n\t *  @name paginate\r\n\t *  @param {integer} countPerPage The number of items to be shown per page\r\n\t *  @param {function} contentAsFunction The data to be shown, as a function returning the data, e.g. function() { return [1,2,3]; }\r\n\t *  @return {Object} Paginate object that holds all the logic for pagination\r\n\t */\r\n\tvar paginate = function paginate(countPerPage, contentAsFunction) {\r\n\t\tvar numberisInteger = function numberisInteger(value) {\r\n\t\t\treturn typeof value === \"number\" &&\r\n\t\t\t\tisFinite(value) &&\r\n\t\t\t\tMath.floor(value) === value;\r\n\t\t};\r\n\r\n\t\tvar page = 0;\r\n\t\tvar count = 0;\r\n\t\tvar i = 0;\r\n\t\tif (numberisInteger(countPerPage) && countPerPage > 0) {\r\n\t\t\tcount = countPerPage;\r\n\t\t} else {\r\n\t\t\tthrow \"Paginate count per page must be a positive integer\";\r\n\t\t}\r\n\t\tvar getContent = contentAsFunction;\r\n\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t *  Set the number of items per page\r\n\t\t\t *  @name paginate.setCount\r\n\t\t\t *  @param {integer} newCount The number of items to be shown per page\r\n\t\t\t *  @return {boolean} false\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(10, content);\r\n\t\t\t *\tpaginateObj.setCount(5); // paginateObj.getCount() === 5\r\n\t\t\t */\r\n\t\t\tsetCount: function paginateSetCount(newCount) {\r\n\t\t\t\tif (numberisInteger(newCount) && newCount > 0) {\r\n\t\t\t\t\tcount = newCount;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow \"Paginate count per page must be a positive integer\";\r\n\t\t\t\t}\r\n\t\t\t\treturn this.getVisibleContent();\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Set the current page\r\n\t\t\t *  @name paginate.setPage\r\n\t\t\t *  @param {integer} pageNum The page to go to\r\n\t\t\t */\r\n\t\t\tsetPage: function paginateSetPage(newPage) {\r\n\t\t\t\tif (numberisInteger(newPage) && newPage >= 0 && newPage < this.getNumPages()) {\r\n\t\t\t\t\tpage = newPage;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow \"Paginate page must be between 0 and numPages\";\r\n\t\t\t\t}\r\n\t\t\t\treturn this.getVisibleContent();\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Get the current number of items per page\r\n\t\t\t *  @name paginate.getCount\r\n\t\t\t *  @return {integer} Current count\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(10, content);\r\n\t\t\t *\tpaginateObj.getCount() === 5;\r\n\t\t\t */\r\n\t\t\tgetCount: function paginateGetCount() {\r\n\t\t\t\treturn count;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  get the current page, index 0\r\n\t\t\t *  @name paginate.getPage\r\n\t\t\t *  @return {integer} Current page\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(10, content);\r\n\t\t\t *\tpaginateObj.getPage() === 0;\r\n\t\t\t */\r\n\t\t\tgetPage: function paginateGetPage() {\r\n\t\t\t\treturn page;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  get the current page, index 0\r\n\t\t\t *  @name paginate.getVisibleContent\r\n\t\t\t *  @return {integer} Current visible content\r\n\t\t\t */\r\n\t\t\tgetVisibleContent: function paginateGetVisibleContent() {\r\n\t\t\t\tvar visibleList = [];\r\n\t\t\t\tvar content = getContent();\r\n\t\t\t\tif(page >= this.getNumPages()) {\r\n\t\t\t\t\tpage = 0;\r\n\t\t\t\t}\r\n\t\t\t\tvar startIndex = page * count;\r\n\t\t\t\t/*for(i = page * count; i < (page * count) + count && i < content.length; i++) {\r\n\t\t\t\t\tvisibleList.push(content[i]);\r\n\t\t\t\t}*/\r\n\t\t\t\tvisibleList = content.slice(startIndex, startIndex + count);\r\n\t\t\t\treturn visibleList;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  get a list of pages and count per page\r\n\t\t\t *  @name paginate.getPages\r\n\t\t\t *  @return {integer} Current list of pages and page info\r\n\t\t\t */\r\n\t\t\tgetPages: function paginateGetPages() {\r\n\t\t\t\tvar pageList = [];\r\n\t\t\t\tvar content = getContent();\r\n\t\t\t\tvar numPages = this.getNumPages();\r\n\t\t\t\tfor(i = 0; i < numPages; i++) {\r\n\t\t\t\t\tpageList.push({\"count\": count, \"index\": i, \"first\": i === 0, \"last\": i === numPages - 1});\r\n\t\t\t\t}\r\n\t\t\t\tif(pageList.length > 0) {\r\n\t\t\t\t\tpageList[pageList.length - 1].count = content.length % count;\r\n\t\t\t\t}\r\n\t\t\t\treturn pageList;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Get the current number of pages based on total number of items and items per page\r\n\t\t\t *  @name paginate.getNumPages\r\n\t\t\t *  @return {integer} Number of pages\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(2, content);\r\n\t\t\t *\tpaginateObj.getNumPages() === 2;\r\n\t\t\t */\r\n\t\t\tgetNumPages: function paginateNumPages() {\r\n\t\t\t\treturn Math.ceil(getContent().length / count);\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Get if the current page is the first page\r\n\t\t\t *  @name paginate.getIsFirstPage\r\n\t\t\t *  @return {boolean} The current page is the first page\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(10, content);\r\n\t\t\t *\tpaginateObj.getIsFirstPage() === true;\r\n\t\t\t */\r\n\t\t\tgetIsFirstPage: function paginateIsFirstPage() {\r\n\t\t\t\treturn page === 0;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Get if the current page is the last page\r\n\t\t\t *  @name paginate.getIsLastPage\r\n\t\t\t *  @return {boolean} The current page is the last page\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(2, content);\r\n\t\t\t *\tpaginateObj.nextPage();\r\n\t\t\t *\tpaginateObj.getIsLastPage() === true;\r\n\t\t\t */\r\n\t\t\tgetIsLastPage: function paginateIsLastPage() {\r\n\t\t\t\treturn page === this.getNumPages() - 1;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Set the current page to the first page\r\n\t\t\t *  @name paginate.firstPage\r\n\t\t\t *  @return {boolean} false\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(10, content);\r\n\t\t\t *\tpaginateObj.firstPage(); // paginateObj.getPage() === 0\r\n\t\t\t */\r\n\t\t\tfirstPage: function paginateFirstPage() {\r\n\t\t\t\tpage = 0;\r\n\t\t\t\treturn this.getVisibleContent();\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Set the current page to the previous page\r\n\t\t\t *  @name paginate.prevPage\r\n\t\t\t *  @return {boolean} false\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(2, content);\r\n\t\t\t *\tpaginateObj.nextPage();\r\n\t\t\t *\tpaginateObj.prevPage(); // paginateObj.getPage() === 0\r\n\t\t\t */\r\n\t\t\tprevPage: function paginatePrevPage() {\r\n\t\t\t\tpage = !this.getIsFirstPage() ? page - 1 : page;\r\n\t\t\t\treturn this.getVisibleContent();\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Set the current page to the next page\r\n\t\t\t *  @name paginate.nextPage\r\n\t\t\t *  @return {boolean} false\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(2, content);\r\n\t\t\t *\tpaginateObj.nextPage(); // paginateObj.getPage() === 1\r\n\t\t\t */\r\n\t\t\tnextPage: function paginateNextPage() {\r\n\t\t\t\tpage = !this.getIsLastPage() ? page + 1 : page;\r\n\t\t\t\treturn this.getVisibleContent();\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t *  Set the current page to the last page\r\n\t\t\t *  @name paginate.lastPage\r\n\t\t\t *  @return {boolean} false\r\n\t\t\t *  @example\r\n\t\t\t *\tvar content = function() { return [1,2,3]; };\r\n\t\t\t *\tvar paginateObj = paginate(2, content);\r\n\t\t\t *\tpaginateObj.lastPage(5); // paginateObj.getPage() === 1\r\n\t\t\t */\r\n\t\t\tlastPage: function paginateLastPage() {\r\n\t\t\t\tpage = this.getNumPages() - 1;\r\n\t\t\t\treturn this.getVisibleContent();\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/*globals module define*/\r\n\tif(typeof define === \"function\" && define.amd) {\r\n\t\tdefine(function() {\r\n\t\t\treturn paginate;\r\n\t\t});\r\n\t} else if(typeof module !== \"undefined\" && module.exports) {\r\n\t\tmodule.exports = paginate;\r\n\t} else {\r\n\t\tthat.paginate = paginate;\r\n\t}\r\n\r\n}(this));\r\n"],"sourceRoot":"/source/"}